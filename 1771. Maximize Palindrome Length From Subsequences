**Basic Idea:**
```Concatenate both strings and find longest palindromic subsequence and check boundary condition that one character from word1 and other corresponding character from word2.```


**1. Recursive Memoized Solution**
```
class Solution {
public:
    
    //use to memoize recursive solution
    vector<vector<int>> v;
    
    /* 
    boundary of both strings,
    l is length of concatenated string,
    ans is used to store final result 
    */
    
    int boundary,l,ans;
    
    //Longest palindromic string
    int find(string &s,int i,int j)
    { 
        // i->left, j->right  
        //if left index is greater than right then return
        if(i>j) return 0; 
        
        //if already calculated, return result
        if(v[i][j]!=-1) return v[i][j];
        
        //if we are at stage where i==j,
        //means here single character
        //count it and increase left boundary and decrease right boundary
        if(i==j) 
        {
            return v[i][j]=1+find(s,i+1,j-1);
        }
        
        
        //if two characters are same, count these two and
        //increase left boundary and decrease right boundary
        //and call function
        if(s[i]==s[j]) 
        {
            
            int k=v[i][j]=2+find(s,i+1,j-1);
            
            /*
            
             if left character is from word1 and
             right character is from word2
             then store maximum result in ans
             
             NOTE: till (boundary-1) index s stored word1
             and from index (boundary) s stored word2
            
            */
            if(i<boundary && j>=boundary)
            { 
                ans=max(ans,k);
            }
            return k;
        }
        
        //if characters are not same,
        //try both increase left index and make right index constent
        // or make left constant or decrease right index
        // and return max of both
        else 
        {
            return v[i][j]=max(find(s,i+1,j),find(s,i,j-1));
        }
    }
    
    int longestPalindrome(string word1, string word2) {
        
        //store boundary of strings
        boundary=word1.size();
        
        //concatenate both strings
        word1+=word2; 
         
        //find total length of string
        l=word1.length(); 
        
        //used to memoize solution
        v=vector<vector<int>>  (l+1,vector<int> (l+1,-1));
        
        //call function
        int k=find(word1,0,l-1); 
        
        
        //return final ans
        return ans;
    }
};
```

------------------------------------------------------------------------------------
**2.DP Solution**
```
class Solution {
public:
    
    //use to memoize recursive solution
    vector<vector<int>> v;
    
    /* 
    boundary of both strings,
    l is length of concatenated string,
    ans is used to store final result 
    */
    
    int boundary,l,ans;
    
    
    int longestPalindrome(string word1, string word2) {
        
        //store boundary of strings
        boundary=word1.size();
        
        //concatenate both strings
        word1+=word2; 
         
        //find total length of string
        l=word1.length(); 
        
        //used to memoize solution
        v=vector<vector<int>>  (l+1,vector<int> (l+1,0));
        
        
        //single character will be palindromic
        for(int i=0;i<l;i++) v[1][i]=1;
        
        //check from length 2
        for(int i=2;i<=l;i++)  
        {
            //iterate from 0th index till l-i+1
            for(int j=0;j<l-i+1;j++) 
            {  
                //if two characters are same, count both
                if(word1[j]==word1[i+j-1])
                {
                    v[i][j]=2+v[i-2][j+1];
                    
                    // if left char from word1 and right from word2
                    // store ans
                    if(j<boundary && i+j-1>=boundary)
                    { 
                        ans=max(ans,v[i][j]);
                    }
                }
                else 
				//if characters are not same,
				//try both increase left index and make right index constent
				// or make left constant or decrease right index
				// and return max of both
                {
                    v[i][j]=max(v[i-1][j],v[i-1][j+1]);
                }
            }
        }
      
        return ans;
    }
};
```
 
 
**Time Complexity : O( (m+n)^2),  
Time Complexity : O( (m+n)^2), m and n is length of word1 and word2**

